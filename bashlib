#!/bin/bash

# Terminal Background Color Strings
export BG_DEFAULT='\e[49m'
export BG_BLACK='\e[40m'
export BG_RED='\e[41m'
export BG_GREEN='\e[42m'
export BG_YELLOW='\e[43m'
export BG_BLUE='\e[44m'
export BG_MAGENTA='\e[45m'
export BG_CYAN='\e[46m'
export BG_GRAY='\e[100m'
export BG_WHITE='\e[107m'

# Terminal Foreground Color Strings
export DEFAULT='\e[39m'
export BLACK='\e[30m'
export RED='\e[31m'
export GREEN='\e[32m'
export YELLOW='\e[33m'
export BLUE='\e[34m'
export MAGENTA='\e[35m'
export CYAN='\e[36m'
export GRAY='\e[90m'
export WHITE='\e[97m'

# Terminal Text Formatting Strings
export BOLD='\e[1m'
export DIM='\e[2m'
export UNDERLINED='\e[4m'
export INVERTED='\e[7m'
export BLINK='\e[5m'
export RESET='\e[0m'


# FUNCTIONS

################################################################################
# Convert a human-readable data size and converts it into bytes
# Arguments: $1 or stdin, human-readable data size
################################################################################
data_size_bytes() {
  local AWK_EXPR='
    BEGIN {
      IGNORECASE = 1
    }
    function printpower(n,b,p) {
      printf "%u\n", n*b^p
      next
    }
    /[0-9](B)?$/{print int($1);next}
    /K(iB|B)?$/{printpower($1,  2, 10)}
    /M(iB|B)?$/{printpower($1,  2, 20)}
    /G(iB|B)?$/{printpower($1,  2, 30)}
    /T(iB|B)?$/{printpower($1,  2, 40)}
    /P(iB|B)?$/{printpower($1,  2, 50)}
  '

  if [  -z "$1" ]; then
    awk "${AWK_EXPR}"
  else
    echo $1 | awk "${AWK_EXPR}"
  fi
}

################################################################################
# Converts a data size into human-readable format in the most appropriate unit.
# Arguments: $1 or stdin, data size 
################################################################################
data_size_human() {
  local SIZE

  is_num $1 
  if [ $? -eq 0 ]; then
    SIZE=$1
  else
    SIZE=$(data_size_bytes $1) 
  fi

  awk -v size="$SIZE" '
      BEGIN {
        human[1024^5]="PB"
        human[1024^4]="TB"
        human[1024^3]="GB"
        human[1024^2]="MB"
        human[1024]="KB"
        for (x=1024^5; x>=1024; x/=1024) {
          if (size>=x) {
            printf "%.2f%s\n",size/x,human[x]
            break
          }
        }
        if (size<1024) print size"B"
      }
    '
}

################################################################################
# Prints the time between two dates in seconds, minutes, hours or days. If only
# one date is provided, the time between that date and 'now' is printed.
# Arguments: $1 = date string, $2 = date string
################################################################################
date_diff() {
  local DATE1 DATE2 EPOCH1 EPOCH2 ARGS
  declare -a ARGS=()

  # Parse args
  until [ -z "$1" ]; do
    case $1 in
       -s|--seconds)  SEC=1;;
       -m|--minutes)  SEC=60;;
       -h|--hours)    SEC=3600;;
       -d|--days)     SEC=86400;;
       *)             ARGS+=("$1");;
    esac
    shift
  done

  # Sanity check the input
  if [ "${#ARGS[@]}" -eq 1 ]; then
    DATE2=${ARGS[0]}
    DATE1=now
  elif [ "${#ARGS[@]}" -eq 2 ]; then
    DATE2=${ARGS[1]}
    DATE1=${ARGS[0]}
  else
    echo "Usage: date_diff [-s] [-m] [-h] [-d] <date1> [date2]" >&2
    return 1
  fi

  # Handle epoch dates
  is_int "${DATE1}" && DATE1="@${DATE1}"
  is_int "${DATE2}" && DATE2="@${DATE2}"

  # Convert to epoch for calculatiopn
  EPOCH1=$(date --utc +%s -d "${DATE1}") || return 1
  EPOCH2=$(date --utc +%s -d "${DATE2}") || return 1

  # Diff dates and return in correct denomination
  awk \
    -v EPOCH1=$EPOCH1 \
    -v EPOCH2=$EPOCH2 \
    -v SEC=${SEC:-1} \
    'BEGIN {print (EPOCH1-EPOCH2)/SEC}'
}

################################################################################
# Removes duplicate lines from a file without sorting it. By default, it shows
# the first instance of each line. You can override this by passing the --last
# argument.
# Arguments: $1 or stdin = File path
################################################################################
de_duplicate() {
  local FILE
  local LAST

  until [ -z "${1}" ]; do
    case $1 in
      --last)            LAST=true;;
      *)                 FILE=$1;;
    esac
    shift
  done

  if [ "${LAST}" = "true" ]; then
    tac ${FILE} | awk '!x[$0]++' | tac
  else
    awk '!x[$0]++' ${FILE}
  fi
}

################################################################################
# Exit script with a message and exit code
# Arguments: $1 = Message, $2 = Exit code
################################################################################
die() {
  log error "$1"
  exit $2
}

################################################################################
# Sends error messages to stderr in a standard format
# Arguments: $1 = Error string
################################################################################
error() {
  printf "$(date +'%Y-%m-%d %H:%M:%S %z') ${RED}ERROR - $@${DEFAULT}\n" >&2
}

################################################################################
# Calculates the age (in seconds) of a file
# Arguments: $1 = File path
################################################################################
file_age() {
  local EPOCH

  if [ -f "$1" ]; then
    EPOCH=$(stat -c '%Y' $1)
    date_diff now ${EPOCH}
  else
    echo "File $1 does not exist" >&2
    return 1
  fi
}

################################################################################
# Calculates the size (in bytes) of a file
# Arguments: $1 = File path
################################################################################
file_size() {
  if [ -f "$1" ]; then
    stat -c '%s' $1
  else
    error "File $1 does not exist"
    return 1
  fi
}

################################################################################
# Prints a horizontal line (underscores) across the width of the terminal
################################################################################
horizontal_line() {
 printf -v _hr "%*s" $(tput cols) && echo ${_hr// /${1-_}}
}


################################################################################
# Prints INFO messages to stdout in a standard format
# Arguments: $1 = Info string
################################################################################
info() {
  printf "$(date +'%Y-%m-%d %H:%M:%S %z') INFO - $@\n"
}

################################################################################
# Purpose: Tests if a value is an integer, returns 0 if true or 1 if false
# Arguments: $1 or stdin = String to be tested
################################################################################
is_int () { 
  local TEST=$(awk -v VAL="$1" 'BEGIN {print int(VAL)}');

  if [ "$1" = "$TEST" ]; then
    return 0
  else
    return 1
  fi
}

################################################################################
# Purpose: Test if a string is a number
# Arguments: $1 or stdin = String to be tested
################################################################################
is_num() {
  local TEST=$(awk -v VAL="$1" 'BEGIN {print VAL*1}');

  if [ "$1" = "$TEST" ]; then
    return 0
  else
    return 1
  fi
}

################################################################################
# Log info, warn and error messages in a standard format
# Arguments: $1 = Error level, $2 = String to log
# Requirements: ${LOG_FILE} variable
################################################################################
log() {
  case $1 in
    info|warning|error)  $1 "$2" 2>&1 | tee -a ${LOG_FILE};;
    *)                   return 1;;
  esac
}

################################################################################
# Text formatting - Removes special characters from text
# Arguments: $1 or stdin = String to be processed
################################################################################
remove_special_chars() {
  if [ $# -gt 0 ]; then
    sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" <<<"${@}"
  else
    sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"
  fi
}

################################################################################
# Text formatting - Convert characters from upper-case to lower-case
# Arguments: $1 or stdin = String to be processed
################################################################################
to_lower() {
  if [ $# -gt 0 ]; then
    tr '[A-Z]' '[a-z]' <<<"${@}"
  else
    tr '[A-Z]' '[a-z]'
  fi
}

################################################################################
# Text formatting - Convert characters from lower-case to upper-case
# Arguments: $1 or stdin = String to be processed
################################################################################
to_upper() {
  if [ $# -gt 0 ]; then
    tr '[a-z]' '[A-Z]' <<<"${@}"
  else
    tr '[a-z]' '[A-Z]'
  fi
}

################################################################################
# Send warning messages to stdout in a standard format
# Arguments: $1 = Warning string
################################################################################
warning() {
  printf "$(date +'%Y-%m-%d %H:%M:%S %z') ${YELLOW}WARNING - $@${DEFAULT}\n"
}
